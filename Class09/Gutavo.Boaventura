{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Gutavo.Boaventura","provenance":[],"authorship_tag":"ABX9TyOXI2FlJUwE2bTMJGsBV4zw"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"dCikbfPZAnzy","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593803422861,"user_tz":180,"elapsed":2314,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}}},"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","from sklearn.model_selection import train_test_split\n","\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n","from sklearn.metrics import confusion_matrix, classification_report\n","\n","from sklearn.model_selection import RandomizedSearchCV\n","\n","from sklearn.preprocessing import StandardScaler\n","\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","\n","from xgboost import XGBClassifier\n","\n","from sklearn.neural_network import MLPClassifier"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ugbEkgjPCO_k","colab_type":"text"},"source":["## Exercício 1\n","\n","*   Utilize o arquivo \"landsat_full.csv\"\n","*   Considere um problema para classificação de Algodão (S) em contraposição a ‘Não Algodão (N)\n","*   Utilize as técnicas KNN, RandomForest, XGBoost e Redes Neurais (ANN)"]},{"cell_type":"code","metadata":{"id":"SGmG_n6CCYmn","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":139},"executionInfo":{"status":"ok","timestamp":1591364438358,"user_tz":180,"elapsed":3925,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"e672c807-6f87-486b-a3b7-c439d20ac4f1"},"source":["df = pd.read_csv(\"landsat_full.csv\")\n","\n","df['ID'].value_counts()\n","\n","#CLASSE B = Algodao"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["A    1533\n","F    1508\n","C    1358\n","E     707\n","B     703\n","D     626\n","Name: ID, dtype: int64"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"biqg4RywOh8Y","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":104},"executionInfo":{"status":"ok","timestamp":1591364438361,"user_tz":180,"elapsed":3913,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"72aafb74-7170-4388-9c1d-4d56f7af131c"},"source":["df.ID.loc[df.ID == 'B'] = \"S\"\n","df.ID.loc[df.ID == 'A'] = \"N\"\n","df.ID.loc[df.ID == 'C'] = \"N\"\n","df.ID.loc[df.ID == 'D'] = \"N\"\n","df.ID.loc[df.ID == 'E'] = \"N\"\n","df.ID.loc[df.ID == 'F'] = \"N\""],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py:671: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self._setitem_with_indexer(indexer, value)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"zZIb2SIoPhAM","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":69},"executionInfo":{"status":"ok","timestamp":1591364438362,"user_tz":180,"elapsed":3900,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"436f5c64-b218-42d7-ac4d-2e6ca8374a54"},"source":["df['ID'].value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["N    5732\n","S     703\n","Name: ID, dtype: int64"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"6Rc3QmzOMgHJ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":226},"executionInfo":{"status":"ok","timestamp":1591364438365,"user_tz":180,"elapsed":3897,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"4557ac38-6a59-45ae-9ab5-bddbdeb6432d"},"source":["df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>TL1</th>\n","      <th>TL2</th>\n","      <th>TL3</th>\n","      <th>TL4</th>\n","      <th>TM1</th>\n","      <th>TM2</th>\n","      <th>TM3</th>\n","      <th>TM4</th>\n","      <th>TR1</th>\n","      <th>TR2</th>\n","      <th>TR3</th>\n","      <th>TR4</th>\n","      <th>ML1</th>\n","      <th>ML2</th>\n","      <th>ML3</th>\n","      <th>ML4</th>\n","      <th>MM1</th>\n","      <th>MM2</th>\n","      <th>MM3</th>\n","      <th>MM4</th>\n","      <th>MR1</th>\n","      <th>MR2</th>\n","      <th>MR3</th>\n","      <th>MR4</th>\n","      <th>BL1</th>\n","      <th>BL2</th>\n","      <th>BL3</th>\n","      <th>BL4</th>\n","      <th>BM1</th>\n","      <th>BM2</th>\n","      <th>BM3</th>\n","      <th>BM4</th>\n","      <th>BR1</th>\n","      <th>BR2</th>\n","      <th>BR3</th>\n","      <th>BR4</th>\n","      <th>ID</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>92</td>\n","      <td>115</td>\n","      <td>120</td>\n","      <td>94</td>\n","      <td>84</td>\n","      <td>102</td>\n","      <td>106</td>\n","      <td>79</td>\n","      <td>84</td>\n","      <td>102</td>\n","      <td>102</td>\n","      <td>83</td>\n","      <td>101</td>\n","      <td>126</td>\n","      <td>133</td>\n","      <td>103</td>\n","      <td>92</td>\n","      <td>112</td>\n","      <td>118</td>\n","      <td>85</td>\n","      <td>84</td>\n","      <td>103</td>\n","      <td>104</td>\n","      <td>81</td>\n","      <td>102</td>\n","      <td>126</td>\n","      <td>134</td>\n","      <td>104</td>\n","      <td>88</td>\n","      <td>121</td>\n","      <td>128</td>\n","      <td>100</td>\n","      <td>84</td>\n","      <td>107</td>\n","      <td>113</td>\n","      <td>87</td>\n","      <td>N</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>84</td>\n","      <td>102</td>\n","      <td>106</td>\n","      <td>79</td>\n","      <td>84</td>\n","      <td>102</td>\n","      <td>102</td>\n","      <td>83</td>\n","      <td>80</td>\n","      <td>102</td>\n","      <td>102</td>\n","      <td>79</td>\n","      <td>92</td>\n","      <td>112</td>\n","      <td>118</td>\n","      <td>85</td>\n","      <td>84</td>\n","      <td>103</td>\n","      <td>104</td>\n","      <td>81</td>\n","      <td>84</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>78</td>\n","      <td>88</td>\n","      <td>121</td>\n","      <td>128</td>\n","      <td>100</td>\n","      <td>84</td>\n","      <td>107</td>\n","      <td>113</td>\n","      <td>87</td>\n","      <td>84</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>79</td>\n","      <td>N</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>84</td>\n","      <td>102</td>\n","      <td>102</td>\n","      <td>83</td>\n","      <td>80</td>\n","      <td>102</td>\n","      <td>102</td>\n","      <td>79</td>\n","      <td>84</td>\n","      <td>94</td>\n","      <td>102</td>\n","      <td>79</td>\n","      <td>84</td>\n","      <td>103</td>\n","      <td>104</td>\n","      <td>81</td>\n","      <td>84</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>78</td>\n","      <td>84</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>81</td>\n","      <td>84</td>\n","      <td>107</td>\n","      <td>113</td>\n","      <td>87</td>\n","      <td>84</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>79</td>\n","      <td>84</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>79</td>\n","      <td>N</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>80</td>\n","      <td>102</td>\n","      <td>102</td>\n","      <td>79</td>\n","      <td>84</td>\n","      <td>94</td>\n","      <td>102</td>\n","      <td>79</td>\n","      <td>80</td>\n","      <td>94</td>\n","      <td>98</td>\n","      <td>76</td>\n","      <td>84</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>78</td>\n","      <td>84</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>81</td>\n","      <td>76</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>81</td>\n","      <td>84</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>79</td>\n","      <td>84</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>79</td>\n","      <td>84</td>\n","      <td>103</td>\n","      <td>104</td>\n","      <td>79</td>\n","      <td>N</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>84</td>\n","      <td>94</td>\n","      <td>102</td>\n","      <td>79</td>\n","      <td>80</td>\n","      <td>94</td>\n","      <td>98</td>\n","      <td>76</td>\n","      <td>80</td>\n","      <td>102</td>\n","      <td>102</td>\n","      <td>79</td>\n","      <td>84</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>81</td>\n","      <td>76</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>81</td>\n","      <td>76</td>\n","      <td>99</td>\n","      <td>108</td>\n","      <td>85</td>\n","      <td>84</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>79</td>\n","      <td>84</td>\n","      <td>103</td>\n","      <td>104</td>\n","      <td>79</td>\n","      <td>79</td>\n","      <td>107</td>\n","      <td>109</td>\n","      <td>87</td>\n","      <td>N</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   TL1  TL2  TL3  TL4  TM1  TM2  TM3  TM4  ...  BM2  BM3  BM4  BR1  BR2  BR3  BR4  ID\n","0   92  115  120   94   84  102  106   79  ...  121  128  100   84  107  113   87   N\n","1   84  102  106   79   84  102  102   83  ...  107  113   87   84   99  104   79   N\n","2   84  102  102   83   80  102  102   79  ...   99  104   79   84   99  104   79   N\n","3   80  102  102   79   84   94  102   79  ...   99  104   79   84  103  104   79   N\n","4   84   94  102   79   80   94   98   76  ...  103  104   79   79  107  109   87   N\n","\n","[5 rows x 37 columns]"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"KaSwwIFWE-Of","colab_type":"text"},"source":[" Construir Conjuntos de Treino e Teste (70/30) ESTRATIFICADO pelo atributo y.\n","* random_state = 2020"]},{"cell_type":"code","metadata":{"id":"rfkSh6u-EOv2","colab_type":"code","colab":{}},"source":["#Separacao aributo meta e preditores\n","y = df.ID\n","X = df.drop(['ID'],axis=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"srdhESLsE4LN","colab_type":"code","colab":{}},"source":["X_train, X_test, y_train, y_test = train_test_split(X,y, \n","                                                    test_size = 0.3,\n","                                                    random_state = 2020,\n","                                                    stratify = y)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JleO9-17FSX6","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1591364439019,"user_tz":180,"elapsed":4529,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"24405d34-a22a-424b-98da-6d03490f1a59"},"source":["print(X.shape, X_train.shape, X_test.shape, y_train.shape, y_test.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(6435, 36) (4504, 36) (1931, 36) (4504,) (1931,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ozdnBHDSGBvT","colab_type":"text"},"source":["##### 1.A) Para cada um das técnicas e cada hiperparâmetro otimizado, apresente o intervalo (range) utilizado e o valor ótimo encontrado e utilizado para fazer a classificação. Construa uma tabela (DataFrame) semelhante ao quadro abaixo.\n","\n","* OBS 1: Utilize RandomizedSearch do Scikit-Learn  \n","* OBS 2: Para Neural Networks, considere todas camadas com o mesmo número de neurônios"]},{"cell_type":"code","metadata":{"id":"w9z0OZMaGCuK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1591364448763,"user_tz":180,"elapsed":14264,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"adaac193-edcf-44ec-b334-d2ab067fa888"},"source":["#KNN\n","#n_neighbors default = 5\n","%%time\n","\n","knn_rnd = KNeighborsClassifier()\n","knn_range = [{'n_neighbors':np.arange(1,500,2)}]\n","              \n","KNNndSearch = RandomizedSearchCV(knn_rnd,\n","                                    param_distributions = knn_range,\n","                                    n_iter=9,\n","                                    n_jobs=3,\n","                                    random_state=2020)\n","\n","KNNndSearch.fit(X_train,y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 284 ms, sys: 56.2 ms, total: 340 ms\n","Wall time: 12.2 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"dxdL-UVtei8-","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":469},"executionInfo":{"status":"ok","timestamp":1591364620220,"user_tz":180,"elapsed":185712,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"94cd5027-51e6-4174-ea1d-6d7b13cbda67"},"source":["#Random Forest\n","#n_estimators default = 100\n","%time\n","\n","rforest_rnd = RandomForestClassifier(random_state=2020)\n","rforest_range = [{'n_estimators':np.arange(1,1500,1)}]\n","\n","rforestndSearch = RandomizedSearchCV(rforest_rnd,\n","                                    param_distributions = rforest_range,\n","                                    n_iter=9,\n","                                    n_jobs=3,\n","                                    random_state=2020)\n","\n","rforestndSearch.fit(X_train,y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 2 µs, sys: 0 ns, total: 2 µs\n","Wall time: 4.29 µs\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["RandomizedSearchCV(cv=None, error_score=nan,\n","                   estimator=RandomForestClassifier(bootstrap=True,\n","                                                    ccp_alpha=0.0,\n","                                                    class_weight=None,\n","                                                    criterion='gini',\n","                                                    max_depth=None,\n","                                                    max_features='auto',\n","                                                    max_leaf_nodes=None,\n","                                                    max_samples=None,\n","                                                    min_impurity_decrease=0.0,\n","                                                    min_impurity_split=None,\n","                                                    min_samples_leaf=1,\n","                                                    min_samples_split=2,\n","                                                    min_weight_fraction_leaf=0.0,\n","                                                    n_estimators=100,\n","                                                    n_jobs=None,\n","                                                    oob_score=False,\n","                                                    random_state=2020,\n","                                                    verbose=0,\n","                                                    warm_start=False),\n","                   iid='deprecated', n_iter=9, n_jobs=3,\n","                   param_distributions=[{'n_estimators': array([   1,    2,    3, ..., 1497, 1498, 1499])}],\n","                   pre_dispatch='2*n_jobs', random_state=2020, refit=True,\n","                   return_train_score=False, scoring=None, verbose=0)"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"x04WrUisfU_N","colab_type":"code","colab":{}},"source":["#XGBoost\n","#n_estimators default = 100\n","%%time\n","\n","xgboost_rnd = XGBClassifier(objective='reg:squarederror',\n","                               random_state=2020)\n","xgboost_range = [{'n_estimators':np.arange(1,1500,1)}]\n","\n","xgboostndSearch = RandomizedSearchCV(xgboost_rnd,\n","                                     param_distributions = xgboost_range,\n","                                     n_iter=9,\n","                                     n_jobs=3,\n","                                     random_state=2020)\n","\n","xgboostndSearch.fit(X_train,y_train)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jQ0qGxurf778","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1591364742984,"user_tz":180,"elapsed":308458,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"a49c5b56-0400-4b34-afbe-f96c91af2913"},"source":["#Neural Networks\n","#max_iter default = 200\n","%%time\n","\n","mlp_rnd = MLPClassifier(random_state=2020)\n","mlp_range = [{'max_iter':np.arange(1,1500,1)}]\n","\n","mlpndSearch = RandomizedSearchCV(mlp_rnd,\n","                                 param_distributions = mlp_range,\n","                                 n_iter=9,\n","                                 n_jobs=3,\n","                                 random_state=2020)\n","\n","mlpndSearch.fit(X_train,y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 2.43 s, sys: 1.36 s, total: 3.79 s\n","Wall time: 26 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XdL6LkMshIe3","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":104},"executionInfo":{"status":"ok","timestamp":1591364742986,"user_tz":180,"elapsed":308451,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"28476ab3-ceb9-4d58-fbfd-36d2a23fbc0a"},"source":["#valores otimos\n","otim_knn_rnd = KNNndSearch.best_params_\n","otim_rforest_rnd = rforestndSearch.best_params_\n","otim_xgboost_rnd = xgboostndSearch.best_params_\n","otim_mlp_rnd = mlpndSearch.best_params_\n","\n","print(' Valores Otimos:',\n","      '\\n KNN =', otim_knn_rnd,\n","      '\\n Random Forest =', otim_rforest_rnd,\n","      '\\n XGBoost =', otim_xgboost_rnd,\n","      '\\n MLP =', otim_mlp_rnd)"],"execution_count":null,"outputs":[{"output_type":"stream","text":[" Valores Otimos: \n"," KNN = {'n_neighbors': 187} \n"," Random Forest = {'n_estimators': 158} \n"," XGBoost = {'n_estimators': 393} \n"," MLP = {'max_iter': 865}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RaCFoBnwGZhd","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":175},"executionInfo":{"status":"ok","timestamp":1591364742989,"user_tz":180,"elapsed":308443,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"ced41523-d49c-4aa8-e64a-2aaf916ad234"},"source":["linhas = ['KNN','Random Forest','XGBoost','Neural Networks']\n","colunas = ['Hiperparâmetro', 'Valor Mínimo','Valor Máximo','Ótimo']\n","df_HyperOpt = pd.DataFrame(columns=colunas,\n","                           index=linhas)\n","df_HyperOpt"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Hiperparâmetro</th>\n","      <th>Valor Mínimo</th>\n","      <th>Valor Máximo</th>\n","      <th>Ótimo</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>KNN</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>Random Forest</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>XGBoost</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>Neural Networks</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                Hiperparâmetro Valor Mínimo Valor Máximo Ótimo\n","KNN                        NaN          NaN          NaN   NaN\n","Random Forest              NaN          NaN          NaN   NaN\n","XGBoost                    NaN          NaN          NaN   NaN\n","Neural Networks            NaN          NaN          NaN   NaN"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"I2q2FjuIhlxP","colab_type":"code","colab":{}},"source":["df_HyperOpt['Hiperparâmetro'] = 'n_neighbors', 'n_estimators', 'n_estimators', 'max_iter'\n","df_HyperOpt['Valor Mínimo'] = 1\n","df_HyperOpt['Valor Máximo'] = 500, 1500, 1500, 1500\n","df_HyperOpt['Ótimo']= 187, 158, 393, 865"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tjJQUzllkLYn","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":175},"executionInfo":{"status":"ok","timestamp":1591364742991,"user_tz":180,"elapsed":308431,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"5793c82c-3c09-4495-d744-039a10c58a47"},"source":["df_HyperOpt"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Hiperparâmetro</th>\n","      <th>Valor Mínimo</th>\n","      <th>Valor Máximo</th>\n","      <th>Ótimo</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>KNN</th>\n","      <td>n_neighbors</td>\n","      <td>1</td>\n","      <td>500</td>\n","      <td>187</td>\n","    </tr>\n","    <tr>\n","      <th>Random Forest</th>\n","      <td>n_estimators</td>\n","      <td>1</td>\n","      <td>1500</td>\n","      <td>158</td>\n","    </tr>\n","    <tr>\n","      <th>XGBoost</th>\n","      <td>n_estimators</td>\n","      <td>1</td>\n","      <td>1500</td>\n","      <td>393</td>\n","    </tr>\n","    <tr>\n","      <th>Neural Networks</th>\n","      <td>max_iter</td>\n","      <td>1</td>\n","      <td>1500</td>\n","      <td>865</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                Hiperparâmetro  Valor Mínimo  Valor Máximo  Ótimo\n","KNN                n_neighbors             1           500    187\n","Random Forest     n_estimators             1          1500    158\n","XGBoost           n_estimators             1          1500    393\n","Neural Networks       max_iter             1          1500    865"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"markdown","metadata":{"id":"rrVh4Kv7HuHc","colab_type":"text"},"source":["##### 1.B) Utilize as técnicas KNN, RandomForest, XGBoost e Redes Neurais (ANN) para fazer a classificação. Utilize os dados normalizados.\n","\n","* Apresente os resultados da Acurácia, Precisão, Recall e f-1 Score para cada técnica SEM e COM otimização de hiperparâmetros.\n","\n","* Quais as duas melhores (que você recomendaria a utilização)? Por que? Apresente os argumentos e, quando achar necessário/conveniente, acrescente algum recurso para subsidiar sua recomendação. Por exemplo, Matriz de Confusão, gráfico, etc."]},{"cell_type":"code","metadata":{"id":"fBpOa0beoQdp","colab_type":"code","colab":{}},"source":["#Normalizando os dados (Z-score) -> StandardScaler\n","#media e desvio padrao proximos de zero\n","def_scaler = StandardScaler().fit(X_train)\n","X_train_norm = pd.DataFrame(def_scaler.transform(X_train))\n","X_test_norm = pd.DataFrame(def_scaler.transform(X_test))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bodkpFtaqMZm","colab_type":"code","colab":{}},"source":["X_train_norm.head().std()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6UkI1Y77qtY9","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":191},"executionInfo":{"status":"ok","timestamp":1591364743382,"user_tz":180,"elapsed":308804,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"0d633ad9-082a-4a37-be1f-512be728701d"},"source":["#KNN sem otimizar\n","knn_so = KNeighborsClassifier()\n","\n","knn_so.fit(X_train_norm,y_train)\n","\n","y_pred_knn_so = knn_so.predict(X_test_norm)\n","\n","print(\"KNN sem otimizacao \\n\", classification_report(y_test, y_pred_knn_so))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["KNN sem otimizacao \n","               precision    recall  f1-score   support\n","\n","           N       1.00      1.00      1.00      1720\n","           S       0.97      0.97      0.97       211\n","\n","    accuracy                           0.99      1931\n","   macro avg       0.98      0.98      0.98      1931\n","weighted avg       0.99      0.99      0.99      1931\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9cDTccEJr043","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":191},"executionInfo":{"status":"ok","timestamp":1591364744031,"user_tz":180,"elapsed":309445,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"0fc1184e-8466-4577-9133-ce777c6b0fac"},"source":["#KNN com otimizacao\n","knn_co = KNeighborsClassifier(n_neighbors = 187)\n","\n","knn_co.fit(X_train_norm,y_train)\n","\n","y_pred_knn_co = knn_co.predict(X_test_norm)\n","\n","print(\"KNN com otimizacao \\n\", classification_report(y_test, y_pred_knn_co))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["KNN com otimizacao \n","               precision    recall  f1-score   support\n","\n","           N       0.98      1.00      0.99      1720\n","           S       1.00      0.85      0.92       211\n","\n","    accuracy                           0.98      1931\n","   macro avg       0.99      0.93      0.96      1931\n","weighted avg       0.98      0.98      0.98      1931\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"G1HYo5D6sbNQ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":191},"executionInfo":{"status":"ok","timestamp":1591364745045,"user_tz":180,"elapsed":310450,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"e3515aa1-b991-4e89-fd15-71c28d3cf860"},"source":["#Random Forest sem otimizar\n","rforest_so = RandomForestClassifier(random_state = 2020)\n","\n","rforest_so.fit(X_train_norm,y_train)\n","\n","y_pred_rforest_so = rforest_so.predict(X_test_norm)\n","\n","print(\"Random Forest sem otimizacao \\n\", classification_report(y_test, y_pred_rforest_so))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Random Forest sem otimizacao \n","               precision    recall  f1-score   support\n","\n","           N       1.00      1.00      1.00      1720\n","           S       0.99      0.97      0.98       211\n","\n","    accuracy                           1.00      1931\n","   macro avg       0.99      0.98      0.99      1931\n","weighted avg       1.00      1.00      1.00      1931\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4fNhhmJKtAhU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":191},"executionInfo":{"status":"ok","timestamp":1591364746651,"user_tz":180,"elapsed":312047,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"02b2fc3e-077a-4290-d672-1fa77b2861c0"},"source":["#Random Forest otimizado\n","rforest_co = RandomForestClassifier(n_estimators = 158,\n","                                    random_state = 2020)\n","\n","rforest_co.fit(X_train_norm,y_train)\n","\n","y_pred_rforest_co = rforest_co.predict(X_test_norm)\n","\n","print(\"Random Forest otimizado \\n\", classification_report(y_test, y_pred_rforest_co))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Random Forest otimizado \n","               precision    recall  f1-score   support\n","\n","           N       1.00      1.00      1.00      1720\n","           S       0.98      0.97      0.97       211\n","\n","    accuracy                           0.99      1931\n","   macro avg       0.99      0.98      0.99      1931\n","weighted avg       0.99      0.99      0.99      1931\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GWOla2eMtry0","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":191},"executionInfo":{"status":"ok","timestamp":1591364747253,"user_tz":180,"elapsed":312641,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"01f3b3cf-c5b2-4d6d-bb8f-ee4ad69fea4e"},"source":["#XGBoost sem otimizar\n","xgboost_so = XGBClassifier(objective='reg:squarederror',\n","                               random_state=2020)\n","\n","xgboost_so.fit(X_train_norm,y_train)\n","\n","y_pred_xgboost_so = xgboost_so.predict(X_test_norm)\n","\n","print(\"Random XGBoost sem otimizar \\n\", classification_report(y_test, y_pred_xgboost_so))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Random XGBoost sem otimizar \n","               precision    recall  f1-score   support\n","\n","           N       1.00      1.00      1.00      1720\n","           S       0.99      0.97      0.98       211\n","\n","    accuracy                           1.00      1931\n","   macro avg       0.99      0.98      0.99      1931\n","weighted avg       1.00      1.00      1.00      1931\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"x2mOP9SduHkA","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":191},"executionInfo":{"status":"ok","timestamp":1591364749202,"user_tz":180,"elapsed":314580,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"0b54c9e8-716c-4544-e2b5-2006713044a8"},"source":["#XGBoost otimizado\n","xgboost_co = XGBClassifier(n_estimators = 393,\n","                               objective='reg:squarederror',\n","                               random_state=2020)\n","\n","xgboost_co.fit(X_train_norm,y_train)\n","\n","y_pred_xgboost_co = xgboost_co.predict(X_test_norm)\n","\n","print(\"Random XGBoost otimizado \\n\", classification_report(y_test, y_pred_xgboost_co))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Random XGBoost otimizado \n","               precision    recall  f1-score   support\n","\n","           N       1.00      1.00      1.00      1720\n","           S       0.99      0.96      0.98       211\n","\n","    accuracy                           0.99      1931\n","   macro avg       0.99      0.98      0.99      1931\n","weighted avg       0.99      0.99      0.99      1931\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"w1wyOQuKulrO","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":191},"executionInfo":{"status":"ok","timestamp":1591364754081,"user_tz":180,"elapsed":319452,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"62429a9d-e2a6-4246-a31e-95c0ad15c71d"},"source":["#MLP sem otimizar\n","mlp_so = MLPClassifier(random_state=2020)\n","\n","mlp_so.fit(X_train_norm,y_train)\n","\n","y_pred_mlp_so = mlp_so.predict(X_test_norm)\n","\n","print(\"MLP sem otimizar \\n\", classification_report(y_test, y_pred_mlp_so))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["MLP sem otimizar \n","               precision    recall  f1-score   support\n","\n","           N       1.00      1.00      1.00      1720\n","           S       0.99      0.98      0.98       211\n","\n","    accuracy                           1.00      1931\n","   macro avg       0.99      0.99      0.99      1931\n","weighted avg       1.00      1.00      1.00      1931\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"OiWvKOXeu-cx","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":191},"executionInfo":{"status":"ok","timestamp":1591364758975,"user_tz":180,"elapsed":324337,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"4a994d6f-4940-4de7-f167-357dce00fb57"},"source":["#MLP otimizado\n","mlp_co = MLPClassifier(max_iter = 865,\n","                       random_state=2020)\n","\n","mlp_co.fit(X_train_norm,y_train)\n","\n","y_pred_mlp_co = mlp_co.predict(X_test_norm)\n","\n","print(\"MLP otimizado \\n\", classification_report(y_test, y_pred_mlp_co))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["MLP otimizado \n","               precision    recall  f1-score   support\n","\n","           N       1.00      1.00      1.00      1720\n","           S       0.99      0.98      0.98       211\n","\n","    accuracy                           1.00      1931\n","   macro avg       0.99      0.99      0.99      1931\n","weighted avg       1.00      1.00      1.00      1931\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"JP830tBnvpzj","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"status":"ok","timestamp":1591364759270,"user_tz":180,"elapsed":324624,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"b452cc82-26ce-4c70-e281-dc06f897effc"},"source":["df_acuracia = pd.DataFrame({'Modelo': ['KNN (SO)', 'KNN (CO)',\n","                                       'Random Forest(SO)', 'Random Forest (CO)', \n","                                       'XGBoost(SO)', 'XGBoost (CO)',\n","                                       'MLP(SO)', 'MLP (CO)'],     \n","                                     \n","                            'Acurácia Global': [accuracy_score(y_test, y_pred_knn_so), accuracy_score(y_test, y_pred_knn_co),\n","                                                accuracy_score(y_test, y_pred_rforest_so), accuracy_score(y_test, y_pred_rforest_co),\n","                                                accuracy_score(y_test, y_pred_xgboost_so), accuracy_score(y_test, y_pred_xgboost_co),\n","                                                accuracy_score(y_test, y_pred_mlp_so), accuracy_score(y_test, y_pred_mlp_co)],                       \n","                                                    \n","                            'Precisão (Média)': [precision_score(y_test, y_pred_knn_so, average=None).mean(),\n","                                                 precision_score(y_test, y_pred_knn_co, average=None).mean(),\n","\n","                                                 precision_score(y_test, y_pred_rforest_so, average=None).mean(),\n","                                                 precision_score(y_test, y_pred_rforest_co, average=None).mean(),\n","\n","                                                 precision_score(y_test, y_pred_xgboost_so, average=None).mean(),\n","                                                 precision_score(y_test, y_pred_xgboost_co, average=None).mean(),\n","\n","                                                 precision_score(y_test, y_pred_mlp_so, average=None).mean(),\n","                                                 precision_score(y_test, y_pred_mlp_co, average=None).mean()],\n","                            \n","                            'Recall (Média)': [recall_score(y_test, y_pred_knn_so, average=None).mean(),\n","                                               recall_score(y_test, y_pred_knn_co, average=None).mean(),\n","                                               \n","                                               recall_score(y_test, y_pred_rforest_so, average=None).mean(),\n","                                               recall_score(y_test, y_pred_rforest_co, average=None).mean(),\n","\n","                                               recall_score(y_test, y_pred_xgboost_so, average=None).mean(),\n","                                               recall_score(y_test, y_pred_xgboost_co, average=None).mean(),\n","\n","                                               recall_score(y_test, y_pred_mlp_so, average=None).mean(),\n","                                               recall_score(y_test, y_pred_mlp_co, average=None).mean()],\n","                            \n","                            'f-1 Score (Média)': [f1_score(y_test, y_pred_knn_so, average=None).mean(),\n","                                                  f1_score(y_test, y_pred_knn_co, average=None).mean(),\n","\n","                                                  f1_score(y_test, y_pred_rforest_so, average=None).mean(),\n","                                                  f1_score(y_test, y_pred_rforest_co, average=None).mean(),\n","                                                  \n","                                                  f1_score(y_test, y_pred_xgboost_so, average=None).mean(),\n","                                                  f1_score(y_test, y_pred_xgboost_co, average=None).mean(),\n","                                                  \n","                                                  f1_score(y_test, y_pred_mlp_so, average=None).mean(), \n","                                                  f1_score(y_test, y_pred_mlp_co, average=None).mean()]\n","                            })\n","\n","acuracia_ordenado = df_acuracia.sort_values(by='Acurácia Global', ascending=False)\n","acuracia_ordenado"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Modelo</th>\n","      <th>Acurácia Global</th>\n","      <th>Precisão (Média)</th>\n","      <th>Recall (Média)</th>\n","      <th>f-1 Score (Média)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>6</th>\n","      <td>MLP(SO)</td>\n","      <td>0.996375</td>\n","      <td>0.993741</td>\n","      <td>0.987570</td>\n","      <td>0.990630</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>MLP (CO)</td>\n","      <td>0.996375</td>\n","      <td>0.993741</td>\n","      <td>0.987570</td>\n","      <td>0.990630</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Random Forest(SO)</td>\n","      <td>0.995339</td>\n","      <td>0.991047</td>\n","      <td>0.984910</td>\n","      <td>0.987953</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>XGBoost(SO)</td>\n","      <td>0.995339</td>\n","      <td>0.993117</td>\n","      <td>0.982831</td>\n","      <td>0.987902</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>XGBoost (CO)</td>\n","      <td>0.994821</td>\n","      <td>0.992804</td>\n","      <td>0.980461</td>\n","      <td>0.986530</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Random Forest (CO)</td>\n","      <td>0.994303</td>\n","      <td>0.986352</td>\n","      <td>0.984329</td>\n","      <td>0.985337</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>KNN (SO)</td>\n","      <td>0.993786</td>\n","      <td>0.984038</td>\n","      <td>0.984038</td>\n","      <td>0.984038</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>KNN (CO)</td>\n","      <td>0.983946</td>\n","      <td>0.991148</td>\n","      <td>0.926540</td>\n","      <td>0.955892</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["               Modelo  Acurácia Global  ...  Recall (Média)  f-1 Score (Média)\n","6             MLP(SO)         0.996375  ...        0.987570           0.990630\n","7            MLP (CO)         0.996375  ...        0.987570           0.990630\n","2   Random Forest(SO)         0.995339  ...        0.984910           0.987953\n","4         XGBoost(SO)         0.995339  ...        0.982831           0.987902\n","5        XGBoost (CO)         0.994821  ...        0.980461           0.986530\n","3  Random Forest (CO)         0.994303  ...        0.984329           0.985337\n","0            KNN (SO)         0.993786  ...        0.984038           0.984038\n","1            KNN (CO)         0.983946  ...        0.926540           0.955892\n","\n","[8 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"markdown","metadata":{"id":"T8AqpeDZFMIe","colab_type":"text"},"source":["###MATRIZ DE CONFUSAO"]},{"cell_type":"code","metadata":{"id":"bZNCKE9cSXqS","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":104},"executionInfo":{"status":"ok","timestamp":1591364759271,"user_tz":180,"elapsed":324617,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"d68f6359-5b11-4bef-dce3-3fc136d2fc3b"},"source":["#MLP Sem Otimizacao\n","mc_mlp_so = pd.DataFrame(confusion_matrix(y_test, y_pred_mlp_so,\n","                                          labels=['S', 'N']),\n","                                          index=['Obs S', 'Obs N'],\n","                                          columns=['Pred S', 'Pred N']\n","                        )\n","print(\"Matriz de Confusao para MLP (nao otimizado) \\n\",\n","      \"\\n\",\n","      mc_mlp_so)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Matriz de Confusao para MLP (nao otimizado) \n"," \n","        Pred S  Pred N\n","Obs S     206       5\n","Obs N       2    1718\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5Ix6IEgkSeps","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":104},"executionInfo":{"status":"ok","timestamp":1591364759274,"user_tz":180,"elapsed":324615,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"9cd090b0-c2f9-4fd8-f0d0-1f297adff7b5"},"source":["#MLP Com Otimizacao\n","mc_mlp_co = pd.DataFrame(confusion_matrix(y_test, y_pred_mlp_co,\n","                                          labels=['S', 'N']),\n","                                          index=['Obs S', 'Obs N'],\n","                                          columns=['Pred S', 'Pred N']\n","                        )\n","print(\"Matriz de Confusao para MLP (otimizado) \\n\",\n","      \"\\n\",\n","      mc_mlp_co)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Matriz de Confusao para MLP (otimizado) \n"," \n","        Pred S  Pred N\n","Obs S     206       5\n","Obs N       2    1718\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"N0Kg9eUiFQJv","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":104},"executionInfo":{"status":"ok","timestamp":1591364759275,"user_tz":180,"elapsed":324610,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"0ad04c43-11ef-4cb0-b2db-5fe9cfca396f"},"source":["#Random Forest Sem Otimizacao\n","mc_rforest_so = pd.DataFrame(confusion_matrix(y_test, y_pred_rforest_so,\n","                                            labels=['S', 'N']),\n","                           index=['Obs S', 'Obs N'],\n","                           columns=['Pred S', 'Pred N']\n","                           )\n","print(\"Matriz de Confusao para Random Forest (nao otimizado) \\n\",\n","      \"\\n\",\n","      mc_rforest_so)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Matriz de Confusao para Random Forest (nao otimizado) \n"," \n","        Pred S  Pred N\n","Obs S     205       6\n","Obs N       3    1717\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5INu1CXxTPM7","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":104},"executionInfo":{"status":"ok","timestamp":1591364759277,"user_tz":180,"elapsed":324606,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"34eb5f6f-67e5-41e4-a991-e8604697048f"},"source":["#XGBoost Sem Otimizacao\n","mc_xgboost_so = pd.DataFrame(confusion_matrix(y_test, y_pred_xgboost_so,\n","                                          labels=['S', 'N']),\n","                                          index=['Obs S', 'Obs N'],\n","                                          columns=['Pred S', 'Pred N']\n","                           )\n","print(\"Matriz de Confusao para XGBoost (nao otimizado) \\n\",\n","      \"\\n\",\n","      mc_xgboost_so)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Matriz de Confusao para XGBoost (nao otimizado) \n"," \n","        Pred S  Pred N\n","Obs S     204       7\n","Obs N       2    1718\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"68U6E2MeTSng","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":104},"executionInfo":{"status":"ok","timestamp":1591364759278,"user_tz":180,"elapsed":324589,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"e2b15983-9170-48cf-f2f0-81287e6b3fa0"},"source":["#XGBoost Com Otimizacao\n","mc_xgboost_co = pd.DataFrame(confusion_matrix(y_test, y_pred_xgboost_co,\n","                                          labels=['S', 'N']),\n","                                          index=['Obs S', 'Obs N'],\n","                                          columns=['Pred S', 'Pred N']\n","                           )\n","print(\"Matriz de Confusao para XGBoost (otimizado) \\n\",\n","      \"\\n\",\n","      mc_xgboost_co)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Matriz de Confusao para XGBoost (otimizado) \n"," \n","        Pred S  Pred N\n","Obs S     203       8\n","Obs N       2    1718\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"m4L3WFXJS9Qw","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":104},"executionInfo":{"status":"ok","timestamp":1591364759279,"user_tz":180,"elapsed":324585,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"a30a9320-a2f9-42c6-9e0d-4aa65f586de2"},"source":["#Random Forest Com Otimizacao\n","mc_rforest_co = pd.DataFrame(confusion_matrix(y_test, y_pred_rforest_co,\n","                                          labels=['S', 'N']),\n","                                          index=['Obs S', 'Obs N'],\n","                                          columns=['Pred S', 'Pred N']\n","                           )\n","print(\"Matriz de Confusao para Random Forest (otimizado) \\n\",\n","      \"\\n\",\n","      mc_rforest_co)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Matriz de Confusao para Random Forest (otimizado) \n"," \n","        Pred S  Pred N\n","Obs S     205       6\n","Obs N       5    1715\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"giwtd0WhWSnJ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"status":"ok","timestamp":1591364759648,"user_tz":180,"elapsed":324948,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"fe9f67d8-bb49-4c4f-df8b-6e418e1a002d"},"source":["df_grap = pd.DataFrame({'Modelo': ['KNN (SO)', 'KNN (CO)',\n","                                   'Random Forest(SO)', 'Random Forest (CO)', \n","                                   'XGBoost(SO)', 'XGBoost (CO)',\n","                                   'MLP(SO)', 'MLP (CO)'],     \n","                                     \n","                            'Acurácia Global': [accuracy_score(y_test, y_pred_knn_so), accuracy_score(y_test, y_pred_knn_co),\n","                                                accuracy_score(y_test, y_pred_rforest_so), accuracy_score(y_test, y_pred_rforest_co),\n","                                                accuracy_score(y_test, y_pred_xgboost_so), accuracy_score(y_test, y_pred_xgboost_co),\n","                                                accuracy_score(y_test, y_pred_mlp_so), accuracy_score(y_test, y_pred_mlp_co)]})\n","\n","df_grap = df_grap.sort_values(by='Acurácia Global', ascending=False)\n","df_grap"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Modelo</th>\n","      <th>Acurácia Global</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>6</th>\n","      <td>MLP(SO)</td>\n","      <td>0.996375</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>MLP (CO)</td>\n","      <td>0.996375</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Random Forest(SO)</td>\n","      <td>0.995339</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>XGBoost(SO)</td>\n","      <td>0.995339</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>XGBoost (CO)</td>\n","      <td>0.994821</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Random Forest (CO)</td>\n","      <td>0.994303</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>KNN (SO)</td>\n","      <td>0.993786</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>KNN (CO)</td>\n","      <td>0.983946</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["               Modelo  Acurácia Global\n","6             MLP(SO)         0.996375\n","7            MLP (CO)         0.996375\n","2   Random Forest(SO)         0.995339\n","4         XGBoost(SO)         0.995339\n","5        XGBoost (CO)         0.994821\n","3  Random Forest (CO)         0.994303\n","0            KNN (SO)         0.993786\n","1            KNN (CO)         0.983946"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"code","metadata":{"id":"A-lSbJFyWVZT","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":356},"executionInfo":{"status":"ok","timestamp":1591364759650,"user_tz":180,"elapsed":324946,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"ea1a6770-6da4-4c89-af9f-2d006672a3e6"},"source":["ax = df_grap[['Acurácia Global']].plot(kind = 'bar', title =\"Acurácia Global\", figsize=(15, 5), legend=True, fontsize=12)\n","ax.set_xlabel(\"Modelos\", fontsize=12)\n","ax.set_ylim(0.994,0.996)\n","ax.set_ylabel(\"Acurácia Global\", fontsize=12)\n","ax.set_xticklabels(df_grap['Modelo'], fontsize=12, rotation=0)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1080x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"EXHxnHyRcmnw","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"status":"ok","timestamp":1591364760003,"user_tz":180,"elapsed":325294,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"703a988a-69c8-4d6a-e3d7-17ec0ea5403d"},"source":["df_grap_prec = pd.DataFrame({'Modelo': ['KNN (SO)', 'KNN (CO)',\n","                                   'Random Forest(SO)', 'Random Forest (CO)', \n","                                   'XGBoost(SO)', 'XGBoost (CO)',\n","                                   'MLP(SO)', 'MLP (CO)'],     \n","                                     \n","                            'Precisão (Média)': [precision_score(y_test, y_pred_knn_so, average=None).mean(),\n","                                                 precision_score(y_test, y_pred_knn_co, average=None).mean(),\n","\n","                                                 precision_score(y_test, y_pred_rforest_so, average=None).mean(),\n","                                                 precision_score(y_test, y_pred_rforest_co, average=None).mean(),\n","\n","                                                 precision_score(y_test, y_pred_xgboost_so, average=None).mean(),\n","                                                 precision_score(y_test, y_pred_xgboost_co, average=None).mean(),\n","\n","                                                 precision_score(y_test, y_pred_mlp_so, average=None).mean(),\n","                                                 precision_score(y_test, y_pred_mlp_co, average=None).mean()]\n","                           })\n","\n","df_grap_prec = df_grap_prec.sort_values(by='Precisão (Média)', ascending=False)\n","df_grap_prec"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Modelo</th>\n","      <th>Precisão (Média)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>6</th>\n","      <td>MLP(SO)</td>\n","      <td>0.993741</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>MLP (CO)</td>\n","      <td>0.993741</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>XGBoost(SO)</td>\n","      <td>0.993117</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>XGBoost (CO)</td>\n","      <td>0.992804</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>KNN (CO)</td>\n","      <td>0.991148</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Random Forest(SO)</td>\n","      <td>0.991047</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Random Forest (CO)</td>\n","      <td>0.986352</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>KNN (SO)</td>\n","      <td>0.984038</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["               Modelo  Precisão (Média)\n","6             MLP(SO)          0.993741\n","7            MLP (CO)          0.993741\n","4         XGBoost(SO)          0.993117\n","5        XGBoost (CO)          0.992804\n","1            KNN (CO)          0.991148\n","2   Random Forest(SO)          0.991047\n","3  Random Forest (CO)          0.986352\n","0            KNN (SO)          0.984038"]},"metadata":{"tags":[]},"execution_count":36}]},{"cell_type":"code","metadata":{"id":"8ccUTWmCdstk","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":356},"executionInfo":{"status":"ok","timestamp":1591364760007,"user_tz":180,"elapsed":325294,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"a5dae71c-25c0-4a87-8f4d-994861e534bf"},"source":["ax = df_grap_prec[['Precisão (Média)']].plot(kind = 'bar', title =\"Precisão (Média)\", figsize=(15, 5), legend=True, fontsize=12)\n","ax.set_xlabel(\"Modelos\", fontsize=12)\n","ax.set_ylim(0.985,0.994)\n","ax.set_ylabel(\"Precisão (Média)\", fontsize=12)\n","ax.set_xticklabels(df_grap_prec['Modelo'], fontsize=12, rotation=0)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1080x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"gEy9mY71gSQY","colab_type":"text"},"source":["## Exercício 2\n","\n","* Repita todo o procedimento realizado no Exercício 1, utilizando o conjunto de dados do arquivo \"landsat_central.csv\", que representa apenas os pontos centrais de cada linha do conjunto de dados anterior."]},{"cell_type":"code","metadata":{"id":"9ApT7JvGgf3e","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":139},"executionInfo":{"status":"ok","timestamp":1591364760302,"user_tz":180,"elapsed":325583,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"01db8897-0d3f-4f7e-eac5-0ecf4add91e3"},"source":["df_2 = pd.read_csv(\"landsat_central.csv\")\n","\n","df_2['Class'].value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["A    1533\n","F    1508\n","C    1358\n","E     707\n","B     703\n","D     626\n","Name: Class, dtype: int64"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"code","metadata":{"id":"xeqtqPcuh7wK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":69},"executionInfo":{"status":"ok","timestamp":1591364760304,"user_tz":180,"elapsed":325581,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"ca30d42e-ce1f-40e6-9d37-8d88c33d012d"},"source":["df_2 = df_2.replace(to_replace='A', value='N')\n","df_2 = df_2.replace(to_replace='C', value='N')\n","df_2 = df_2.replace(to_replace='D', value='N')\n","df_2 = df_2.replace(to_replace='E', value='N')\n","df_2 = df_2.replace(to_replace='F', value='N')\n","df_2 = df_2.replace(to_replace='B', value='S')\n","\n","df_2['Class'].value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["N    5732\n","S     703\n","Name: Class, dtype: int64"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"id":"dtK7vGKQh-6c","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1591364760305,"user_tz":180,"elapsed":325576,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"37a637bc-5eb4-4d51-ade7-7e2c7a08f45b"},"source":["df_2.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MM1</th>\n","      <th>MM2</th>\n","      <th>MM3</th>\n","      <th>MM4</th>\n","      <th>Class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>92</td>\n","      <td>112</td>\n","      <td>118</td>\n","      <td>85</td>\n","      <td>N</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>84</td>\n","      <td>103</td>\n","      <td>104</td>\n","      <td>81</td>\n","      <td>N</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>84</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>78</td>\n","      <td>N</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>84</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>81</td>\n","      <td>N</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>76</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>81</td>\n","      <td>N</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   MM1  MM2  MM3  MM4 Class\n","0   92  112  118   85     N\n","1   84  103  104   81     N\n","2   84   99  104   78     N\n","3   84   99  104   81     N\n","4   76   99  104   81     N"]},"metadata":{"tags":[]},"execution_count":40}]},{"cell_type":"code","metadata":{"id":"-OCilP_PRtcR","colab_type":"code","colab":{}},"source":["yc = df_2.Class\n","Xc = df_2.drop(['Class'],axis=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AQ4L7hrxR-nE","colab_type":"code","colab":{}},"source":["Xc_train, Xc_test, yc_train, yc_test = train_test_split(Xc,yc, \n","                                                    test_size = 0.3,\n","                                                    random_state = 2020,\n","                                                    stratify = yc)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QD6jfL5CSIJA","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1591364760313,"user_tz":180,"elapsed":325575,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"869e6a83-1ab3-4d36-f36d-b18a1fb42a69"},"source":["print(Xc.shape, Xc_train.shape, Xc_test.shape, yc_train.shape, yc_test.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(6435, 4) (4504, 4) (1931, 4) (4504,) (1931,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"gqadECRHSVSs","colab_type":"text"},"source":["##### 2.A) Para cada um das técnicas e cada hiperparâmetro otimizado, apresente o intervalo (range) utilizado e o valor ótimo encontrado e utilizado para fazer a classificação. Construa uma tabela (DataFrame) semelhante ao quadro abaixo.\n","\n","* OBS 1: Utilize RandomizedSearch do Scikit-Learn  \n","* OBS 2: Para Neural Networks, considere todas camadas com o mesmo número de neurônios"]},{"cell_type":"code","metadata":{"id":"W_6NybZBSY7C","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1591364764183,"user_tz":180,"elapsed":329440,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"230ddfaf-b893-48aa-9edb-4ed667d47a69"},"source":["#KNN\n","#n_neighbors default = 5\n","%%time\n","\n","knn_rndc = KNeighborsClassifier()\n","knn_rangec = [{'n_neighbors':np.arange(1,500,2)}]\n","              \n","KNNndSearchc = RandomizedSearchCV(knn_rndc,\n","                                    param_distributions = knn_rangec,\n","                                    n_iter=9,\n","                                    n_jobs=3,\n","                                    random_state=2020)\n","\n","KNNndSearchc.fit(Xc_train,yc_train)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 256 ms, sys: 10.7 ms, total: 267 ms\n","Wall time: 3.91 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Bx1wuNZ3Se1I","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":469},"executionInfo":{"status":"ok","timestamp":1591364841792,"user_tz":180,"elapsed":407043,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"f40fd7b1-fc59-4743-a727-606aafc7dd0e"},"source":["#Random Forest\n","#n_estimators default = 100\n","%time\n","\n","rforest_rndc = RandomForestClassifier(random_state=2020)\n","rforest_rangec = [{'n_estimators':np.arange(1,1500,1)}]\n","\n","rforestndSearchc = RandomizedSearchCV(rforest_rndc,\n","                                    param_distributions = rforest_rangec,\n","                                    n_iter=9,\n","                                    n_jobs=3,\n","                                    random_state=2020)\n","\n","rforestndSearchc.fit(Xc_train,yc_train)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 3 µs, sys: 0 ns, total: 3 µs\n","Wall time: 7.15 µs\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["RandomizedSearchCV(cv=None, error_score=nan,\n","                   estimator=RandomForestClassifier(bootstrap=True,\n","                                                    ccp_alpha=0.0,\n","                                                    class_weight=None,\n","                                                    criterion='gini',\n","                                                    max_depth=None,\n","                                                    max_features='auto',\n","                                                    max_leaf_nodes=None,\n","                                                    max_samples=None,\n","                                                    min_impurity_decrease=0.0,\n","                                                    min_impurity_split=None,\n","                                                    min_samples_leaf=1,\n","                                                    min_samples_split=2,\n","                                                    min_weight_fraction_leaf=0.0,\n","                                                    n_estimators=100,\n","                                                    n_jobs=None,\n","                                                    oob_score=False,\n","                                                    random_state=2020,\n","                                                    verbose=0,\n","                                                    warm_start=False),\n","                   iid='deprecated', n_iter=9, n_jobs=3,\n","                   param_distributions=[{'n_estimators': array([   1,    2,    3, ..., 1497, 1498, 1499])}],\n","                   pre_dispatch='2*n_jobs', random_state=2020, refit=True,\n","                   return_train_score=False, scoring=None, verbose=0)"]},"metadata":{"tags":[]},"execution_count":45}]},{"cell_type":"code","metadata":{"id":"7ye44Df_Srvj","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1591364874260,"user_tz":180,"elapsed":439506,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"c1e1c7c8-3f00-4779-d6ee-d86220acf946"},"source":["#XGBoost\n","#n_estimators default = 100\n","%%time\n","\n","xgboost_rndc = XGBClassifier(objective='reg:squarederror',\n","                               random_state=2020)\n","xgboost_rangec = [{'n_estimators':np.arange(1,1500,1)}]\n","\n","xgboostndSearchc = RandomizedSearchCV(xgboost_rndc,\n","                                     param_distributions = xgboost_rangec,\n","                                     n_iter=9,\n","                                     n_jobs=3,\n","                                     random_state=2020)\n","\n","xgboostndSearchc.fit(Xc_train,yc_train)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 1.14 s, sys: 21.5 ms, total: 1.17 s\n","Wall time: 32.5 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"krxrYYEJS0yA","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1591364892207,"user_tz":180,"elapsed":457446,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"7909e46b-9d8e-40f0-9056-00da9cc014e9"},"source":["#Neural Networks\n","#max_iter default = 200\n","%%time\n","\n","mlp_rndc = MLPClassifier(random_state=2020)\n","mlp_rangec = [{'max_iter':np.arange(1,1500,1)}]\n","\n","mlpndSearchc = RandomizedSearchCV(mlp_rndc,\n","                                 param_distributions = mlp_rangec,\n","                                 n_iter=9,\n","                                 n_jobs=3,\n","                                 random_state=2020)\n","\n","mlpndSearchc.fit(Xc_train,yc_train)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 1.71 s, sys: 1.04 s, total: 2.75 s\n","Wall time: 17.9 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"EEOuhg6QS5cs","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":104},"executionInfo":{"status":"ok","timestamp":1591364892209,"user_tz":180,"elapsed":457443,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"1101e830-3afe-4205-ebf9-88b932ea8521"},"source":["#valores otimos\n","otim_knn_rndc = KNNndSearchc.best_params_\n","otim_rforest_rndc = rforestndSearchc.best_params_\n","otim_xgboost_rndc = xgboostndSearchc.best_params_\n","otim_mlp_rndc = mlpndSearchc.best_params_\n","\n","print(' Valores Otimos (Agora para conjunto de dados \"Central\"):',\n","      '\\n KNN =', otim_knn_rndc,\n","      '\\n Random Forest =', otim_rforest_rndc,\n","      '\\n XGBoost =', otim_xgboost_rndc,\n","      '\\n MLP =', otim_mlp_rndc)"],"execution_count":null,"outputs":[{"output_type":"stream","text":[" Valores Otimos (Agora para conjunto de dados \"Central\"): \n"," KNN = {'n_neighbors': 187} \n"," Random Forest = {'n_estimators': 393} \n"," XGBoost = {'n_estimators': 631} \n"," MLP = {'max_iter': 865}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"IrxZ2SZOS_k_","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":175},"executionInfo":{"status":"ok","timestamp":1591364892213,"user_tz":180,"elapsed":457442,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"37496be5-0460-41c5-ca1f-3d3e55c850b1"},"source":["df_HyperOptc = pd.DataFrame(columns=colunas,\n","                           index=linhas)\n","df_HyperOptc"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Hiperparâmetro</th>\n","      <th>Valor Mínimo</th>\n","      <th>Valor Máximo</th>\n","      <th>Ótimo</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>KNN</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>Random Forest</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>XGBoost</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>Neural Networks</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                Hiperparâmetro Valor Mínimo Valor Máximo Ótimo\n","KNN                        NaN          NaN          NaN   NaN\n","Random Forest              NaN          NaN          NaN   NaN\n","XGBoost                    NaN          NaN          NaN   NaN\n","Neural Networks            NaN          NaN          NaN   NaN"]},"metadata":{"tags":[]},"execution_count":49}]},{"cell_type":"code","metadata":{"id":"JsIj9VyqTCxe","colab_type":"code","colab":{}},"source":["df_HyperOptc['Hiperparâmetro'] = 'n_neighbors', 'n_estimators', 'n_estimators', 'max_iter'\n","df_HyperOptc['Valor Mínimo'] = 1\n","df_HyperOptc['Valor Máximo'] = 500, 1500, 1500, 1500\n","df_HyperOptc['Ótimo']= 187, 393, 631, 865"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"alj4S1OlU0HB","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":175},"executionInfo":{"status":"ok","timestamp":1591364892217,"user_tz":180,"elapsed":457438,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"76a8adee-d8bb-460b-a3c9-2aa0b30c3b53"},"source":["df_HyperOptc"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Hiperparâmetro</th>\n","      <th>Valor Mínimo</th>\n","      <th>Valor Máximo</th>\n","      <th>Ótimo</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>KNN</th>\n","      <td>n_neighbors</td>\n","      <td>1</td>\n","      <td>500</td>\n","      <td>187</td>\n","    </tr>\n","    <tr>\n","      <th>Random Forest</th>\n","      <td>n_estimators</td>\n","      <td>1</td>\n","      <td>1500</td>\n","      <td>393</td>\n","    </tr>\n","    <tr>\n","      <th>XGBoost</th>\n","      <td>n_estimators</td>\n","      <td>1</td>\n","      <td>1500</td>\n","      <td>631</td>\n","    </tr>\n","    <tr>\n","      <th>Neural Networks</th>\n","      <td>max_iter</td>\n","      <td>1</td>\n","      <td>1500</td>\n","      <td>865</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                Hiperparâmetro  Valor Mínimo  Valor Máximo  Ótimo\n","KNN                n_neighbors             1           500    187\n","Random Forest     n_estimators             1          1500    393\n","XGBoost           n_estimators             1          1500    631\n","Neural Networks       max_iter             1          1500    865"]},"metadata":{"tags":[]},"execution_count":51}]},{"cell_type":"markdown","metadata":{"id":"GQ4xOcneVCV1","colab_type":"text"},"source":["##### 1.B) Utilize as técnicas KNN, RandomForest, XGBoost e Redes Neurais (ANN) para fazer a classificação. Utilize os dados normalizados.\n","\n","* Apresente os resultados da Acurácia, Precisão, Recall e f-1 Score para cada técnica SEM e COM otimização de hiperparâmetros.\n","\n","* Quais as duas melhores (que você recomendaria a utilização)? Por que? Apresente os argumentos e, quando achar necessário/conveniente, acrescente algum recurso para subsidiar sua recomendação. Por exemplo, Matriz de Confusão, gráfico, etc."]},{"cell_type":"code","metadata":{"id":"PuldSZhQVLG7","colab_type":"code","colab":{}},"source":["#Normalizando os dados (Z-score) -> StandardScaler\n","#media e desvio padrao proximos de zero\n","def_scalerc = StandardScaler().fit(Xc_train)\n","Xc_train_norm = pd.DataFrame(def_scalerc.transform(Xc_train))\n","Xc_test_norm = pd.DataFrame(def_scalerc.transform(Xc_test))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LXUa2SxTVScv","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":104},"executionInfo":{"status":"ok","timestamp":1591367735306,"user_tz":180,"elapsed":682,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"b23a4494-a03b-4e5d-84a2-2662ac48db83"},"source":["Xc_train_norm.head().std()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    1.262670\n","1    1.533303\n","2    1.152265\n","3    1.465316\n","dtype: float64"]},"metadata":{"tags":[]},"execution_count":94}]},{"cell_type":"code","metadata":{"id":"hNHBcyUxVreS","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":191},"executionInfo":{"status":"ok","timestamp":1591364892606,"user_tz":180,"elapsed":457814,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"e5b70258-e425-4b97-acd7-67ce6f67cbfb"},"source":["#KNN sem otimizar\n","knn_soc = KNeighborsClassifier()\n","\n","knn_soc.fit(Xc_train_norm,yc_train)\n","\n","y_pred_knn_soc = knn_soc.predict(Xc_test_norm)\n","\n","print(\"KNN sem otimizacao \\n\", classification_report(yc_test, y_pred_knn_soc))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["KNN sem otimizacao \n","               precision    recall  f1-score   support\n","\n","           N       0.99      1.00      0.99      1720\n","           S       0.98      0.91      0.94       211\n","\n","    accuracy                           0.99      1931\n","   macro avg       0.98      0.95      0.97      1931\n","weighted avg       0.99      0.99      0.99      1931\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"2Zs2EwhHV4Bv","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":191},"executionInfo":{"status":"ok","timestamp":1591364892608,"user_tz":180,"elapsed":457810,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"8967a39c-a187-4c3a-d199-f0096bab8c01"},"source":["#KNN com otimizacao\n","knn_coc = KNeighborsClassifier(n_neighbors = 187)\n","\n","knn_coc.fit(Xc_train_norm,yc_train)\n","\n","y_pred_knn_coc = knn_coc.predict(Xc_test_norm)\n","\n","print(\"KNN com otimizacao \\n\", classification_report(yc_test, y_pred_knn_coc))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["KNN com otimizacao \n","               precision    recall  f1-score   support\n","\n","           N       0.98      1.00      0.99      1720\n","           S       1.00      0.87      0.93       211\n","\n","    accuracy                           0.99      1931\n","   macro avg       0.99      0.94      0.96      1931\n","weighted avg       0.99      0.99      0.99      1931\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nilNN3uHWObq","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":191},"executionInfo":{"status":"ok","timestamp":1591364892904,"user_tz":180,"elapsed":458101,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"a065d7dc-24b7-4071-dbc3-9b2d480a1f7a"},"source":["#Random Forest sem otimizar\n","rforest_soc = RandomForestClassifier(random_state = 2020)\n","\n","rforest_soc.fit(Xc_train_norm,yc_train)\n","\n","y_pred_rforest_soc = rforest_soc.predict(Xc_test_norm)\n","\n","print(\"Random Forest sem otimizacao \\n\", classification_report(yc_test, y_pred_rforest_soc))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Random Forest sem otimizacao \n","               precision    recall  f1-score   support\n","\n","           N       0.99      1.00      0.99      1720\n","           S       0.97      0.92      0.94       211\n","\n","    accuracy                           0.99      1931\n","   macro avg       0.98      0.96      0.97      1931\n","weighted avg       0.99      0.99      0.99      1931\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"72pyARaQWZKs","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":191},"executionInfo":{"status":"ok","timestamp":1591364894845,"user_tz":180,"elapsed":460038,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"f5194ef4-ba35-4d67-9361-06a27548e224"},"source":["#Random Forest otimizado\n","rforest_coc = RandomForestClassifier(n_estimators = 393,\n","                                    random_state = 2020)\n","\n","rforest_coc.fit(Xc_train_norm,yc_train)\n","\n","y_pred_rforest_coc = rforest_coc.predict(Xc_test_norm)\n","\n","print(\"Random Forest otimizado \\n\", classification_report(yc_test, y_pred_rforest_coc))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Random Forest otimizado \n","               precision    recall  f1-score   support\n","\n","           N       0.99      0.99      0.99      1720\n","           S       0.96      0.92      0.94       211\n","\n","    accuracy                           0.99      1931\n","   macro avg       0.97      0.96      0.96      1931\n","weighted avg       0.99      0.99      0.99      1931\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"WipBH_HKWp6P","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":191},"executionInfo":{"status":"ok","timestamp":1591364894847,"user_tz":180,"elapsed":460035,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"b84b1938-8a81-4606-9a67-ed62fba936a2"},"source":["#XGBoost sem otimizar\n","xgboost_soc = XGBClassifier(objective='reg:squarederror',\n","                               random_state=2020)\n","\n","xgboost_soc.fit(Xc_train_norm,yc_train)\n","\n","y_pred_xgboost_soc = xgboost_soc.predict(Xc_test_norm)\n","\n","print(\"Random XGBoost sem otimizar \\n\", classification_report(yc_test, y_pred_xgboost_soc))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Random XGBoost sem otimizar \n","               precision    recall  f1-score   support\n","\n","           N       0.99      1.00      0.99      1720\n","           S       0.98      0.91      0.94       211\n","\n","    accuracy                           0.99      1931\n","   macro avg       0.99      0.95      0.97      1931\n","weighted avg       0.99      0.99      0.99      1931\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"2H8qCbTNW4LK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":191},"executionInfo":{"status":"ok","timestamp":1591364896088,"user_tz":180,"elapsed":461271,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"13e5bba3-8d9f-4db7-ed81-23133a01a94f"},"source":["#XGBoost otimizado\n","xgboost_coc = XGBClassifier(n_estimators = 631,\n","                               objective='reg:squarederror',\n","                               random_state=2020)\n","\n","xgboost_coc.fit(Xc_train_norm,yc_train)\n","\n","y_pred_xgboost_coc = xgboost_coc.predict(Xc_test_norm)\n","\n","print(\"Random XGBoost otimizado \\n\", classification_report(yc_test, y_pred_xgboost_coc))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Random XGBoost otimizado \n","               precision    recall  f1-score   support\n","\n","           N       0.99      1.00      0.99      1720\n","           S       0.97      0.92      0.95       211\n","\n","    accuracy                           0.99      1931\n","   macro avg       0.98      0.96      0.97      1931\n","weighted avg       0.99      0.99      0.99      1931\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"v0ps0NUEXOne","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":191},"executionInfo":{"status":"ok","timestamp":1591364900452,"user_tz":180,"elapsed":465630,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"aa01d96a-9829-4c9d-b522-48adc7e94835"},"source":["#MLP sem otimizar\n","mlp_soc = MLPClassifier(random_state=2020)\n","\n","mlp_soc.fit(Xc_train_norm,yc_train)\n","\n","y_pred_mlp_soc = mlp_soc.predict(Xc_test_norm)\n","\n","print(\"MLP sem otimizar \\n\", classification_report(yc_test, y_pred_mlp_soc))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["MLP sem otimizar \n","               precision    recall  f1-score   support\n","\n","           N       0.99      1.00      0.99      1720\n","           S       0.97      0.92      0.94       211\n","\n","    accuracy                           0.99      1931\n","   macro avg       0.98      0.96      0.97      1931\n","weighted avg       0.99      0.99      0.99      1931\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"jxvht0pgXdHp","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":191},"executionInfo":{"status":"ok","timestamp":1591364904883,"user_tz":180,"elapsed":470056,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"7092a20f-5fe4-425c-f50b-099d9d4e08ca"},"source":["#MLP otimizado\n","mlp_coc = MLPClassifier(max_iter = 865,\n","                       random_state=2020)\n","\n","mlp_coc.fit(Xc_train_norm,yc_train)\n","\n","y_pred_mlp_coc = mlp_coc.predict(Xc_test_norm)\n","\n","print(\"MLP otimizado \\n\", classification_report(yc_test, y_pred_mlp_coc))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["MLP otimizado \n","               precision    recall  f1-score   support\n","\n","           N       0.99      1.00      0.99      1720\n","           S       0.97      0.92      0.94       211\n","\n","    accuracy                           0.99      1931\n","   macro avg       0.98      0.96      0.97      1931\n","weighted avg       0.99      0.99      0.99      1931\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"aqOw-OR5XsxJ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"status":"ok","timestamp":1591364905184,"user_tz":180,"elapsed":470351,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"07439ec9-1a22-459a-a7fd-06c9861cb17b"},"source":["df_2_acuracia = pd.DataFrame({'Modelo': ['KNN (SO)', 'KNN (CO)',\n","                                       'Random Forest(SO)', 'Random Forest (CO)', \n","                                       'XGBoost(SO)', 'XGBoost (CO)',\n","                                       'MLP(SO)', 'MLP (CO)'],     \n","                                     \n","                            'Acurácia Global': [accuracy_score(yc_test, y_pred_knn_soc), accuracy_score(yc_test, y_pred_knn_coc),\n","                                                accuracy_score(yc_test, y_pred_rforest_soc), accuracy_score(yc_test, y_pred_rforest_coc),\n","                                                accuracy_score(yc_test, y_pred_xgboost_soc), accuracy_score(yc_test, y_pred_xgboost_coc),\n","                                                accuracy_score(yc_test, y_pred_mlp_soc), accuracy_score(yc_test, y_pred_mlp_coc)],                       \n","                                                    \n","                            'Precisão (Média)': [precision_score(yc_test, y_pred_knn_soc, average=None).mean(),\n","                                                 precision_score(yc_test, y_pred_knn_coc, average=None).mean(),\n","\n","                                                 precision_score(yc_test, y_pred_rforest_soc, average=None).mean(),\n","                                                 precision_score(yc_test, y_pred_rforest_coc, average=None).mean(),\n","\n","                                                 precision_score(yc_test, y_pred_xgboost_soc, average=None).mean(),\n","                                                 precision_score(yc_test, y_pred_xgboost_coc, average=None).mean(),\n","\n","                                                 precision_score(yc_test, y_pred_mlp_soc, average=None).mean(),\n","                                                 precision_score(yc_test, y_pred_mlp_coc, average=None).mean()],\n","                            \n","                            'Recall (Média)': [recall_score(yc_test, y_pred_knn_soc, average=None).mean(),\n","                                               recall_score(yc_test, y_pred_knn_coc, average=None).mean(),\n","                                               \n","                                               recall_score(yc_test, y_pred_rforest_soc, average=None).mean(),\n","                                               recall_score(yc_test, y_pred_rforest_coc, average=None).mean(),\n","\n","                                               recall_score(yc_test, y_pred_xgboost_soc, average=None).mean(),\n","                                               recall_score(yc_test, y_pred_xgboost_coc, average=None).mean(),\n","\n","                                               recall_score(yc_test, y_pred_mlp_soc, average=None).mean(),\n","                                               recall_score(yc_test, y_pred_mlp_coc, average=None).mean()],\n","                            \n","                            'f-1 Score (Média)': [f1_score(yc_test, y_pred_knn_soc, average=None).mean(),\n","                                                  f1_score(yc_test, y_pred_knn_coc, average=None).mean(),\n","\n","                                                  f1_score(yc_test, y_pred_rforest_soc, average=None).mean(),\n","                                                  f1_score(yc_test, y_pred_rforest_coc, average=None).mean(),\n","                                                  \n","                                                  f1_score(yc_test, y_pred_xgboost_soc, average=None).mean(),\n","                                                  f1_score(yc_test, y_pred_xgboost_coc, average=None).mean(),\n","                                                  \n","                                                  f1_score(yc_test, y_pred_mlp_soc, average=None).mean(), \n","                                                  f1_score(yc_test, y_pred_mlp_coc, average=None).mean()]\n","                            })\n","\n","acuracia_2_ordenado = df_2_acuracia.sort_values(by='Acurácia Global', ascending=False)\n","acuracia_2_ordenado"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Modelo</th>\n","      <th>Acurácia Global</th>\n","      <th>Precisão (Média)</th>\n","      <th>Recall (Média)</th>\n","      <th>f-1 Score (Média)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>5</th>\n","      <td>XGBoost (CO)</td>\n","      <td>0.988607</td>\n","      <td>0.982530</td>\n","      <td>0.958262</td>\n","      <td>0.969984</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>XGBoost(SO)</td>\n","      <td>0.988089</td>\n","      <td>0.986511</td>\n","      <td>0.951735</td>\n","      <td>0.968278</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>MLP(SO)</td>\n","      <td>0.988089</td>\n","      <td>0.980090</td>\n","      <td>0.957971</td>\n","      <td>0.968687</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>MLP (CO)</td>\n","      <td>0.988089</td>\n","      <td>0.980090</td>\n","      <td>0.957971</td>\n","      <td>0.968687</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>KNN (SO)</td>\n","      <td>0.987571</td>\n","      <td>0.983983</td>\n","      <td>0.951444</td>\n","      <td>0.966971</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Random Forest(SO)</td>\n","      <td>0.987571</td>\n","      <td>0.977674</td>\n","      <td>0.957681</td>\n","      <td>0.967396</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Random Forest (CO)</td>\n","      <td>0.986535</td>\n","      <td>0.972914</td>\n","      <td>0.957099</td>\n","      <td>0.964829</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>KNN (CO)</td>\n","      <td>0.986018</td>\n","      <td>0.992272</td>\n","      <td>0.936019</td>\n","      <td>0.961929</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["               Modelo  Acurácia Global  ...  Recall (Média)  f-1 Score (Média)\n","5        XGBoost (CO)         0.988607  ...        0.958262           0.969984\n","4         XGBoost(SO)         0.988089  ...        0.951735           0.968278\n","6             MLP(SO)         0.988089  ...        0.957971           0.968687\n","7            MLP (CO)         0.988089  ...        0.957971           0.968687\n","0            KNN (SO)         0.987571  ...        0.951444           0.966971\n","2   Random Forest(SO)         0.987571  ...        0.957681           0.967396\n","3  Random Forest (CO)         0.986535  ...        0.957099           0.964829\n","1            KNN (CO)         0.986018  ...        0.936019           0.961929\n","\n","[8 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":62}]},{"cell_type":"markdown","metadata":{"id":"LVANuOQ2YyRG","colab_type":"text"},"source":["###MATRIZ DE CONFUSAO"]},{"cell_type":"code","metadata":{"id":"w3Y1XBy6YzQV","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":104},"executionInfo":{"status":"ok","timestamp":1591364905186,"user_tz":180,"elapsed":470348,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"910cc0c8-a543-499d-ef7a-6c1352bccf77"},"source":["#XGBoost Com Otimizacao\n","mc_xgboost_coc = pd.DataFrame(confusion_matrix(yc_test, y_pred_xgboost_coc,\n","                                          labels=['S', 'N']),\n","                                          index=['Obs S', 'Obs N'],\n","                                          columns=['Pred S', 'Pred N']\n","                           )\n","print(\"Matriz de Confusao para XGBoost (otimizado) \\n\",\n","      \"\\n\",\n","      mc_xgboost_coc)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Matriz de Confusao para XGBoost (otimizado) \n"," \n","        Pred S  Pred N\n","Obs S     194      17\n","Obs N       5    1715\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4F5qnQ-wZey4","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":104},"executionInfo":{"status":"ok","timestamp":1591364905187,"user_tz":180,"elapsed":470344,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"c11ae808-dee3-4b3a-dc84-e5814368f1a7"},"source":["#XGBoost Sem Otimizacao\n","mc_xgboost_soc = pd.DataFrame(confusion_matrix(yc_test, y_pred_xgboost_soc,\n","                                          labels=['S', 'N']),\n","                                          index=['Obs S', 'Obs N'],\n","                                          columns=['Pred S', 'Pred N']\n","                           )\n","print(\"Matriz de Confusao para XGBoost (nao otimizado) \\n\",\n","      \"\\n\",\n","      mc_xgboost_soc)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Matriz de Confusao para XGBoost (nao otimizado) \n"," \n","        Pred S  Pred N\n","Obs S     191      20\n","Obs N       3    1717\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"kKSMTYBLZueN","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":104},"executionInfo":{"status":"ok","timestamp":1591364905189,"user_tz":180,"elapsed":470342,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"53edd120-23a4-4380-a0d2-eb985b4af33c"},"source":["#MLP Sem Otimizacao\n","mc_mlp_soc = pd.DataFrame(confusion_matrix(yc_test, y_pred_mlp_soc,\n","                                          labels=['S', 'N']),\n","                                          index=['Obs S', 'Obs N'],\n","                                          columns=['Pred S', 'Pred N']\n","                        )\n","print(\"Matriz de Confusao para MLP (nao otimizado) \\n\",\n","      \"\\n\",\n","      mc_mlp_soc)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Matriz de Confusao para MLP (nao otimizado) \n"," \n","        Pred S  Pred N\n","Obs S     194      17\n","Obs N       6    1714\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"sC3xkqr7Zy2K","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":104},"executionInfo":{"status":"ok","timestamp":1591364905190,"user_tz":180,"elapsed":470337,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"cc894eca-11ac-48b2-df1d-5a04f7dd048f"},"source":["#MLP Sem Otimizacao\n","mc_mlp_coc = pd.DataFrame(confusion_matrix(yc_test, y_pred_mlp_soc,\n","                                          labels=['S', 'N']),\n","                                          index=['Obs S', 'Obs N'],\n","                                          columns=['Pred S', 'Pred N']\n","                        )\n","print(\"Matriz de Confusao para MLP (nao otimizado) \\n\",\n","      \"\\n\",\n","      mc_mlp_coc)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Matriz de Confusao para MLP (nao otimizado) \n"," \n","        Pred S  Pred N\n","Obs S     194      17\n","Obs N       6    1714\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"hfHtilN5Z9xq","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"status":"ok","timestamp":1591364905600,"user_tz":180,"elapsed":470742,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"17365ca2-21c8-4a19-8407-a73f73a111e7"},"source":["df_2_grap = pd.DataFrame({'Modelo': ['KNN (SO)', 'KNN (CO)',\n","                                       'Random Forest(SO)', 'Random Forest (CO)', \n","                                       'XGBoost(SO)', 'XGBoost (CO)',\n","                                       'MLP(SO)', 'MLP (CO)'],     \n","                                     \n","                            'Acurácia Global': [accuracy_score(yc_test, y_pred_knn_soc), accuracy_score(yc_test, y_pred_knn_coc),\n","                                                accuracy_score(yc_test, y_pred_rforest_soc), accuracy_score(yc_test, y_pred_rforest_coc),\n","                                                accuracy_score(yc_test, y_pred_xgboost_soc), accuracy_score(yc_test, y_pred_xgboost_coc),\n","                                                accuracy_score(yc_test, y_pred_mlp_soc), accuracy_score(yc_test, y_pred_mlp_coc)]\n","                          })\n","\n","df_2_grap = df_2_grap.sort_values(by='Acurácia Global', ascending=False)\n","df_2_grap"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Modelo</th>\n","      <th>Acurácia Global</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>5</th>\n","      <td>XGBoost (CO)</td>\n","      <td>0.988607</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>XGBoost(SO)</td>\n","      <td>0.988089</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>MLP(SO)</td>\n","      <td>0.988089</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>MLP (CO)</td>\n","      <td>0.988089</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>KNN (SO)</td>\n","      <td>0.987571</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Random Forest(SO)</td>\n","      <td>0.987571</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Random Forest (CO)</td>\n","      <td>0.986535</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>KNN (CO)</td>\n","      <td>0.986018</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["               Modelo  Acurácia Global\n","5        XGBoost (CO)         0.988607\n","4         XGBoost(SO)         0.988089\n","6             MLP(SO)         0.988089\n","7            MLP (CO)         0.988089\n","0            KNN (SO)         0.987571\n","2   Random Forest(SO)         0.987571\n","3  Random Forest (CO)         0.986535\n","1            KNN (CO)         0.986018"]},"metadata":{"tags":[]},"execution_count":67}]},{"cell_type":"code","metadata":{"id":"WN7V4ENZaHbY","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":356},"executionInfo":{"status":"ok","timestamp":1591364905603,"user_tz":180,"elapsed":470740,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"88d56017-302b-48ec-c594-5a251c75d362"},"source":["ax = df_2_grap[['Acurácia Global']].plot(kind = 'bar', title =\"Acurácia Global\", figsize=(15, 5), legend=True, fontsize=12)\n","ax.set_xlabel(\"Modelos\", fontsize=12)\n","#ax.set_ylim(0.988,0.98865)\n","ax.set_ylabel(\"Acurácia Global\", fontsize=12)\n","ax.set_xticklabels(df_2_grap['Modelo'], fontsize=12, rotation=0)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1080x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"N9DpLogebBLY","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":356},"executionInfo":{"status":"ok","timestamp":1591364906184,"user_tz":180,"elapsed":471316,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"360bae85-0ec6-456e-9d6b-2f5440824b42"},"source":["ax = df_2_grap[['Acurácia Global']].plot(kind = 'bar', title =\"Acurácia Global\", figsize=(15, 5), legend=True, fontsize=12)\n","ax.set_xlabel(\"Modelos\", fontsize=12)\n","ax.set_ylim(0.988,0.98865)\n","ax.set_ylabel(\"Acurácia Global\", fontsize=12)\n","ax.set_xticklabels(df_2_grap['Modelo'], fontsize=12, rotation=0)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1080x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"2cbJqiW2bJv9","colab_type":"text"},"source":["## Exercício 3 (Bônus)\n","\n","* Considere o conjunto de dados \"*landsat_central.csv*\"\n","\n","* Frequentemente, quando se trabalha com imagens de satélite, são criados índices, que são combinações de bandas. O NDVI é um exemplo de índice que combina as bandas do infravermelho próximo (NIR, Near Infra Red) e do vermelho (Red).\n","\n","> $ NDVI = \\frac{NIR - Red}{NIR + Red} $\n","\n","* Assuma que no conjunto de dados, a Banda 3 seja a banda \"**Red**\" e a Banda 4 seja a banda \"**NIR (Near InfraRed**)\"\n","\n","* Construa um atributo NDVI para o conjunto de dados\n","\n","* Escolha a técnica com melhor resultado no Exercício 2 e execute-a novamente, desta vez, incluindo o atributo NDVI.\n","\n","* Discuta sobre os novos resultados comparando-os com os resultados anteriores"]},{"cell_type":"code","metadata":{"id":"Ou1ML9ecbyKI","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1591364906185,"user_tz":180,"elapsed":471313,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"3509de8f-322d-4030-8666-33748a7aeed7"},"source":["data_ = pd.read_csv(\"landsat_central.csv\")\n","\n","data_.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MM1</th>\n","      <th>MM2</th>\n","      <th>MM3</th>\n","      <th>MM4</th>\n","      <th>Class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>92</td>\n","      <td>112</td>\n","      <td>118</td>\n","      <td>85</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>84</td>\n","      <td>103</td>\n","      <td>104</td>\n","      <td>81</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>84</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>78</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>84</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>81</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>76</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>81</td>\n","      <td>C</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   MM1  MM2  MM3  MM4 Class\n","0   92  112  118   85     C\n","1   84  103  104   81     C\n","2   84   99  104   78     C\n","3   84   99  104   81     C\n","4   76   99  104   81     C"]},"metadata":{"tags":[]},"execution_count":70}]},{"cell_type":"code","metadata":{"id":"kMyINb0wcHQX","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":121},"executionInfo":{"status":"ok","timestamp":1591364906187,"user_tz":180,"elapsed":471309,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"56b63289-4e5a-4e37-e845-fc2dec088285"},"source":["#NDVI = (MM4 - MM3)/(MM4 + MM3)\n","data_sum = data_.MM4 + data_.MM3\n","data_sub = data_.MM4 - data_.MM3\n","NDVI = data_sub / data_sum\n","\n","data_['NDVI'] = NDVI\n","NDVI.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0   -0.162562\n","1   -0.124324\n","2   -0.142857\n","3   -0.124324\n","4   -0.124324\n","dtype: float64"]},"metadata":{"tags":[]},"execution_count":71}]},{"cell_type":"code","metadata":{"id":"LctP-bogewlO","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1591364906189,"user_tz":180,"elapsed":471307,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"b51f25de-8fb7-4c8f-8a95-ce53a9a87f85"},"source":["data_['NDVI'] = NDVI\n","data_.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MM1</th>\n","      <th>MM2</th>\n","      <th>MM3</th>\n","      <th>MM4</th>\n","      <th>Class</th>\n","      <th>NDVI</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>92</td>\n","      <td>112</td>\n","      <td>118</td>\n","      <td>85</td>\n","      <td>C</td>\n","      <td>-0.162562</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>84</td>\n","      <td>103</td>\n","      <td>104</td>\n","      <td>81</td>\n","      <td>C</td>\n","      <td>-0.124324</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>84</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>78</td>\n","      <td>C</td>\n","      <td>-0.142857</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>84</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>81</td>\n","      <td>C</td>\n","      <td>-0.124324</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>76</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>81</td>\n","      <td>C</td>\n","      <td>-0.124324</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   MM1  MM2  MM3  MM4 Class      NDVI\n","0   92  112  118   85     C -0.162562\n","1   84  103  104   81     C -0.124324\n","2   84   99  104   78     C -0.142857\n","3   84   99  104   81     C -0.124324\n","4   76   99  104   81     C -0.124324"]},"metadata":{"tags":[]},"execution_count":72}]},{"cell_type":"code","metadata":{"id":"avH5qaOAfD09","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":69},"executionInfo":{"status":"ok","timestamp":1591364906190,"user_tz":180,"elapsed":471303,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"dca38bea-47bc-44c5-d002-a015f9f0ea62"},"source":["data_ = data_.replace(to_replace='A', value='N')\n","data_ = data_.replace(to_replace='C', value='N')\n","data_ = data_.replace(to_replace='D', value='N')\n","data_ = data_.replace(to_replace='E', value='N')\n","data_ = data_.replace(to_replace='F', value='N')\n","data_ = data_.replace(to_replace='B', value='S')\n","\n","data_['Class'].value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["N    5732\n","S     703\n","Name: Class, dtype: int64"]},"metadata":{"tags":[]},"execution_count":73}]},{"cell_type":"code","metadata":{"id":"8hKscIiTfetH","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1591364906191,"user_tz":180,"elapsed":471299,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"61b01028-f781-4d76-bc89-dc1e402ed30b"},"source":["data_.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MM1</th>\n","      <th>MM2</th>\n","      <th>MM3</th>\n","      <th>MM4</th>\n","      <th>Class</th>\n","      <th>NDVI</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>92</td>\n","      <td>112</td>\n","      <td>118</td>\n","      <td>85</td>\n","      <td>N</td>\n","      <td>-0.162562</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>84</td>\n","      <td>103</td>\n","      <td>104</td>\n","      <td>81</td>\n","      <td>N</td>\n","      <td>-0.124324</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>84</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>78</td>\n","      <td>N</td>\n","      <td>-0.142857</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>84</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>81</td>\n","      <td>N</td>\n","      <td>-0.124324</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>76</td>\n","      <td>99</td>\n","      <td>104</td>\n","      <td>81</td>\n","      <td>N</td>\n","      <td>-0.124324</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   MM1  MM2  MM3  MM4 Class      NDVI\n","0   92  112  118   85     N -0.162562\n","1   84  103  104   81     N -0.124324\n","2   84   99  104   78     N -0.142857\n","3   84   99  104   81     N -0.124324\n","4   76   99  104   81     N -0.124324"]},"metadata":{"tags":[]},"execution_count":74}]},{"cell_type":"code","metadata":{"id":"U7U6-e6yf1kg","colab_type":"code","colab":{}},"source":["_y = data_.Class\n","_X = data_.drop(['Class'],axis=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Nn7WMuvogELe","colab_type":"code","colab":{}},"source":["_X_train, _X_test, _y_train, _y_test = train_test_split(_X,_y, \n","                                                    test_size = 0.3,\n","                                                    random_state = 2020,\n","                                                    stratify = _y)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2p_ktlKQgZDC","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1591364906194,"user_tz":180,"elapsed":471292,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"824d68db-4647-4eff-e27d-c1a690b6ba96"},"source":["print(_X.shape, _X_train.shape, _X_test.shape, _y_train.shape, _y_test.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(6435, 5) (4504, 5) (1931, 5) (4504,) (1931,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"FFL9N-qPgvXH","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1591364941420,"user_tz":180,"elapsed":506514,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"4f66b329-c3c6-446a-ca0c-34bbe2a52dd3"},"source":["#XGBoost\n","#n_estimators default = 100\n","%%time\n","\n","_xgboost_rnd = XGBClassifier(objective='reg:squarederror',\n","                               random_state=2020)\n","_xgboost_range = [{'n_estimators':np.arange(1,1500,1)}]\n","\n","_xgboostndSearch = RandomizedSearchCV(_xgboost_rnd,\n","                                     param_distributions = _xgboost_range,\n","                                     n_iter=9,\n","                                     n_jobs=3,\n","                                     random_state=2020)\n","\n","_xgboostndSearch.fit(_X_train,_y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 1.24 s, sys: 21.5 ms, total: 1.26 s\n","Wall time: 35.3 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"kjkFcAAPhGpE","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1591364941422,"user_tz":180,"elapsed":506510,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"72131b7e-c8e5-4faa-ab67-be236f9588d7"},"source":["#valor otimo\n","_otim_xgboost_rnd = _xgboostndSearch.best_params_\n","\n","\n","print(' Valor Otimo:',\n","      '\\n XGBoost =', _otim_xgboost_rnd\n","     )"],"execution_count":null,"outputs":[{"output_type":"stream","text":[" Valor Otimo: \n"," XGBoost = {'n_estimators': 631}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"CbPc-4-lhqZB","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":81},"executionInfo":{"status":"ok","timestamp":1591364941423,"user_tz":180,"elapsed":506507,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"b4ba3485-2df6-4ea1-b9fe-bad5073fda1d"},"source":["linha = ['XGBoost']\n","\n","_df_HyperOpt = pd.DataFrame(columns=colunas,\n","                           index=linha)\n","_df_HyperOpt"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Hiperparâmetro</th>\n","      <th>Valor Mínimo</th>\n","      <th>Valor Máximo</th>\n","      <th>Ótimo</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>XGBoost</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        Hiperparâmetro Valor Mínimo Valor Máximo Ótimo\n","XGBoost            NaN          NaN          NaN   NaN"]},"metadata":{"tags":[]},"execution_count":80}]},{"cell_type":"code","metadata":{"id":"fHFBf3Kch8pK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":81},"executionInfo":{"status":"ok","timestamp":1591364941425,"user_tz":180,"elapsed":506503,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"be5a86e1-cfcb-465e-d2d3-25780385f2b2"},"source":["_df_HyperOpt['Hiperparâmetro'] = 'n_estimators'\n","_df_HyperOpt['Valor Mínimo'] = 1\n","_df_HyperOpt['Valor Máximo'] = 1500\n","_df_HyperOpt['Ótimo']= 631\n","\n","_df_HyperOpt"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Hiperparâmetro</th>\n","      <th>Valor Mínimo</th>\n","      <th>Valor Máximo</th>\n","      <th>Ótimo</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>XGBoost</th>\n","      <td>n_estimators</td>\n","      <td>1</td>\n","      <td>1500</td>\n","      <td>631</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        Hiperparâmetro  Valor Mínimo  Valor Máximo  Ótimo\n","XGBoost   n_estimators             1          1500    631"]},"metadata":{"tags":[]},"execution_count":81}]},{"cell_type":"code","metadata":{"id":"wR6sDr_niUqo","colab_type":"code","colab":{}},"source":["#Normalizando os dados (Z-score) -> StandardScaler\n","#media e desvio padrao proximos de zero\n","_def_scaler = StandardScaler().fit(_X_train)\n","_X_train_norm = pd.DataFrame(_def_scaler.transform(_X_train))\n","_X_test_norm = pd.DataFrame(_def_scaler.transform(_X_test))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3kF_6So-ihaz","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":121},"executionInfo":{"status":"ok","timestamp":1591368197797,"user_tz":180,"elapsed":1165,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"f675bec7-2baf-43bd-a016-31d429f7f685"},"source":["_X_train_norm.mean()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    4.620958e-16\n","1   -8.628129e-17\n","2   -1.760051e-16\n","3    1.338264e-16\n","4    1.226200e-16\n","dtype: float64"]},"metadata":{"tags":[]},"execution_count":95}]},{"cell_type":"code","metadata":{"id":"CCSSmmtbiucL","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":191},"executionInfo":{"status":"ok","timestamp":1591364941644,"user_tz":180,"elapsed":506711,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"c86c7005-d3f7-4f56-d083-b09e61b754f1"},"source":["#XGBoost sem otimizar\n","_xgboost_so = XGBClassifier(objective='reg:squarederror',\n","                               random_state=2020)\n","\n","_xgboost_so.fit(_X_train_norm,_y_train)\n","\n","_y_pred_xgboost_so = _xgboost_so.predict(_X_test_norm)\n","\n","print(\"Random XGBoost sem otimizar \\n\", classification_report(_y_test, _y_pred_xgboost_so))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Random XGBoost sem otimizar \n","               precision    recall  f1-score   support\n","\n","           N       0.99      1.00      0.99      1720\n","           S       0.98      0.89      0.93       211\n","\n","    accuracy                           0.99      1931\n","   macro avg       0.98      0.94      0.96      1931\n","weighted avg       0.99      0.99      0.99      1931\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"-gm_idkci_-J","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":191},"executionInfo":{"status":"ok","timestamp":1591364942888,"user_tz":180,"elapsed":507949,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"e5db2412-058f-4054-f74c-1f0150df68e8"},"source":["#XGBoost otimizando\n","_xgboost_co = XGBClassifier(n_estimators = 631,\n","                            objective='reg:squarederror',\n","                               random_state=2020)\n","\n","_xgboost_co.fit(_X_train_norm,_y_train)\n","\n","_y_pred_xgboost_co = _xgboost_co.predict(_X_test_norm)\n","\n","print(\"Random XGBoost sem otimizar \\n\", classification_report(_y_test, _y_pred_xgboost_co))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Random XGBoost sem otimizar \n","               precision    recall  f1-score   support\n","\n","           N       0.99      1.00      0.99      1720\n","           S       0.97      0.91      0.94       211\n","\n","    accuracy                           0.99      1931\n","   macro avg       0.98      0.96      0.97      1931\n","weighted avg       0.99      0.99      0.99      1931\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"TZrfa0jFjTbm","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":112},"executionInfo":{"status":"ok","timestamp":1591364942890,"user_tz":180,"elapsed":507946,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"42da4b7c-8c2d-4a7c-82b3-fe207e101e07"},"source":["_acuracia = pd.DataFrame({'Modelo': [ \n","                                       'XGBoost(SO)', 'XGBoost (CO)'\n","                                       ],     \n","                                     \n","                            'Acurácia Global': [accuracy_score(_y_test, _y_pred_xgboost_so), accuracy_score(_y_test, _y_pred_xgboost_co)],\n","                                                                       \n","                                                    \n","                            'Precisão (Média)': [precision_score(_y_test, _y_pred_xgboost_so, average=None).mean(),\n","                                                 precision_score(_y_test, _y_pred_xgboost_co, average=None).mean()],\n","\n","                                                 \n","                            'Recall (Média)': [recall_score(_y_test, _y_pred_xgboost_so, average=None).mean(),\n","                                               recall_score(_y_test, _y_pred_xgboost_co, average=None).mean()],\n","                                               \n","                                              \n","                            \n","                            'f-1 Score (Média)': [f1_score(_y_test, _y_pred_xgboost_so, average=None).mean(),\n","                                                  f1_score(_y_test, _y_pred_xgboost_co, average=None).mean()],\n","\n","                                                  \n","                            })\n","\n","_acuracia_ordenado = _acuracia.sort_values(by='Acurácia Global', ascending=False)\n","_acuracia_ordenado"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Modelo</th>\n","      <th>Acurácia Global</th>\n","      <th>Precisão (Média)</th>\n","      <th>Recall (Média)</th>\n","      <th>f-1 Score (Média)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>XGBoost (CO)</td>\n","      <td>0.987571</td>\n","      <td>0.979728</td>\n","      <td>0.955602</td>\n","      <td>0.967255</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>XGBoost(SO)</td>\n","      <td>0.986018</td>\n","      <td>0.982970</td>\n","      <td>0.944335</td>\n","      <td>0.962598</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         Modelo  Acurácia Global  ...  Recall (Média)  f-1 Score (Média)\n","1  XGBoost (CO)         0.987571  ...        0.955602           0.967255\n","0   XGBoost(SO)         0.986018  ...        0.944335           0.962598\n","\n","[2 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":86}]},{"cell_type":"code","metadata":{"id":"jdZ-FMMbkxv3","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":104},"executionInfo":{"status":"ok","timestamp":1591364942891,"user_tz":180,"elapsed":507943,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"0515ec83-9da3-49e0-bd90-ff20979361ab"},"source":["#XGBoost Com Otimizacao\n","_mc_xgboost_co = pd.DataFrame(confusion_matrix(_y_test, _y_pred_xgboost_co,\n","                                          labels=['S', 'N']),\n","                                          index=['Obs S', 'Obs N'],\n","                                          columns=['Pred S', 'Pred N']\n","                           )\n","print(\"Matriz de Confusao para XGBoost (otimizado) \\n\",\n","      \"\\n\",\n","      _mc_xgboost_co)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Matriz de Confusao para XGBoost (otimizado) \n"," \n","        Pred S  Pred N\n","Obs S     193      18\n","Obs N       6    1714\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"DCgQAAuwks_T","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":104},"executionInfo":{"status":"ok","timestamp":1591364942893,"user_tz":180,"elapsed":507941,"user":{"displayName":"Gustavo Boaventura Cruz","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhHLYBbZGQ9plwzIm-zhcRQ2F0-ogNSLzAiJCbC=s64","userId":"14078767499598208727"}},"outputId":"98ca55e1-523c-4953-f094-23af8192fe7c"},"source":["#XGBoost Sem Otimizacao\n","_mc_xgboost_so = pd.DataFrame(confusion_matrix(_y_test, _y_pred_xgboost_so,\n","                                          labels=['S', 'N']),\n","                                          index=['Obs S', 'Obs N'],\n","                                          columns=['Pred S', 'Pred N']\n","                           )\n","print(\"Matriz de Confusao para XGBoost (nao otimizado) \\n\",\n","      \"\\n\",\n","      _mc_xgboost_so)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Matriz de Confusao para XGBoost (nao otimizado) \n"," \n","        Pred S  Pred N\n","Obs S     188      23\n","Obs N       4    1716\n"],"name":"stdout"}]}]}